/*
MX3100DRV - portable driver for the MX-3100 gaming mouse
Copyright (C) 2017  Dan Panzarella

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#ifndef MX_MX_H
#define MX_MX_H

/* buffer sizes */
#define CMD_MSG_LEN 8
#define DATA_LINE_LEN 64
#define DATA_LINES 2

/* memory map addresses */
#define CONFIGS_ADDR 0x73
#define BUTTONS_ADDR 0x72
#define MACRO_ADDR_START 0x6f
#define NUM_MACROS 19

/* bit calculations for address checks */
#define SETTINGS_ADDR_MAX 0x73
#define SETTINGS_ADDR_PARITY 0x0c
#define MACRO_ADDR_PARITY 0x70
#define MACRO_MEM_FLAG 0x0f
/* bit command flags */
#define ADDR_READ (1 << 7)


/* unknown, infrequently sent commands */
static const unsigned char CMD_ADMIN_1[] = {0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x7d};
static const unsigned char CMD_ADMIN_2[] = {0x01,0xfc,0x00,0x00,0x00,0x00,0x00,0x02};




/* Settings locations */
#define ANGLE_SNAP_ADDR 0x33
#define ANGLE_SNAP_ENABLED  1
#define ANGLE_SNAP_DISABLED 0
//oddly no linear or bitwise relationship here
#define ANGLE_CORRECT_ADDR 0x31
#define ANGLE_CORRECT_NEG2 0xe2
#define ANGLE_CORRECT_NEG1 0xf6
#define ANGLE_CORRECT_ZERO 0x00
#define ANGLE_CORRECT_POS1 0x0f
#define ANGLE_CORRECT_POS2 0x1e

#define LED_MODE_ADDR 0x47
#define LED_MODE_OFF     0x00
#define LED_MODE_STD     0x01
#define LED_MODE_BREATHE 0x02
#define LED_MODE_NEON    0x03

#define LED_CFG_ADDR 0x48
#define LED_BRIGHT_MIN   0x00
#define LED_BRIGHT_MAX   0x0A
#define LED_SPEED_MIN    0x01
#define LED_SPEED_MAX    0x0F

#define SENSITIVITY_X_ADDR 0x4a
#define SENSITIVITY_Y_ADDR 0x4b
#define SENSITIVITY_MIN 1
#define SENSITIVITY_MAX 10
#define SENSITIVITY_STEP 0x14

#define DPI_ENABLE_ADDR      0x64
#define DPI_VALUE_ADDR_X     0x54
#define DPI_VALUE_ADDR_Y     0x5c
#define DPI_COLOR_ADDR_START 0x68
#define DPI_COLOR_ADDR_STEP  0x03
#define DPI_PROFILE_MIN 1
#define DPI_PROFILE_MAX 7
#define DPI_VALUE_MIN 100
#define DPI_VALUE_MAX 12000


typedef int (*MXCommand)(int, char **);
#define MXCOMMAND(func_name) int func_name(int argc, char **argv)

static const unsigned char factory_config[] = {
	0x8e, 0x00, 0x01, 0x00, 0x42, 0x03, 0xfe, 0x0f, /* unknown  ... */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x04, 0x02, 0x01, 0x0c, 0x0e, 0x0f, 0x07,
	0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff,
	0x00, 0xff, 0xa0, 0xa0, 0xa0, 0xff, 0xff, 0xff,
	0x11, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, /* gesture corr */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* unknown ... */
	0x0f, 0x04, 0x0a, 0x0a, 0x19, 0x19, 0x07, 0x01, /* RGB mode */
	0x04, 0x03, 0x64, 0x64, 0x01, 0xc0, 0xf0, 0x03, /* RGB config, sensitivity */
	0x01, 0x01, 0x64, 0x00, 0x04, 0x09, 0x0e, 0x13, /* DPI Y */
	0x27, 0x4f, 0x77, 0x77, 0x04, 0x09, 0x0e, 0x13, /* DPI Y,X */
	0x27, 0x4f, 0x77, 0x77, 0x7f, 0xff, 0xff, 0xff, /* DPI X, DPI enabled */
	0xff, 0x80, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, /* DPI colors */
	0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, /* DPI colors */
	0xff, 0xff, 0x80, 0x00, 0xff, 0x00, 0x00, 0x00  /* DPI colors */
};
static const unsigned char factory_buttons[] = {
	0x01, 0x00, 0xf0, 0x00, 0x01, 0x00, 0xf1, 0x00, /* LMB, RMB */
	0x01, 0x00, 0xf2, 0x00, 0x07, 0x00, 0x01, 0x00, /* buttons 5,6 */
	0x07, 0x00, 0x02, 0x00, 0x01, 0x00, 0xf5, 0x00, /* buttons 7,4 */
	0x01, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, /* button 3, NONE */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S1, S2 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S3, S4 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* NONE, NONE */
	0x01, 0x00, 0xf7, 0x00, 0x01, 0x00, 0xf8, 0x00, /* scroll up/down? */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S5, S6 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S7, S8 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S9, S10 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* S11, S12 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* NONE ...  */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
	User-facing commands
*/
MXCOMMAND(angle_snap);
MXCOMMAND(angle_correct);
MXCOMMAND(led_mode);
MXCOMMAND(led_brightness);
MXCOMMAND(led_speed);
MXCOMMAND(sensitivity);
MXCOMMAND(dpi_enable);
MXCOMMAND(dpi_color);
MXCOMMAND(dpi_value);
MXCOMMAND(factory_reset);

/* setup */
int send_startup_cmds(void);

#endif
